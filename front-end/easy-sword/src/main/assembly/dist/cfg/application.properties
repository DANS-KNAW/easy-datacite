#
# EASY SWORD-based Ingest Service configuration file
#
# Please, modify the configuration below to match your environment. At the very least,
# you will need to fill in the places starting with ### below. Notice the 
# additional comments about what values to fill in.
#
# If all supporting services are located on the same host (using default ports) fill in
# the hostname here (e.g. 'localhost' for the same host as easy-sword).  Otherwise change
# the instances of ${easy.host} below appropriately. 
easy.host={{ easy_sword_host }}

# OpenLDAP user database
ldap.providerURL=ldap://${easy.host}:389
ldap.securityPrincipal=cn=ldapadmin,dc=dans,dc=knaw,dc=nl
ldap.securityCredentials={{ easy_sword_ldapadmin_password }}
ldap.context.users=ou=users,ou=easy,dc=dans,dc=knaw,dc=nl
ldap.context.groups=ou=groups,ou=easy,dc=dans,dc=knaw,dc=nl
ldap.context.migration=ou=migration,ou=easy,dc=dans,dc=knaw,dc=nl
ldap.context.federation=ou=federation,ou=easy,dc=dans,dc=knaw,dc=nl

# Federation login support
easy.federationLogin.enabled=false
easy.federationLogin.debug.enabled=false
easy.federationLogin.debug.user.file=/tmp/feduser.properties
#
# The URL used to start a federated login procedure using Shibboleth
easy.federationLogin.federationUrl=http://dummy.com
easy.federationLogin.propertyMapping.shibSessionId=Shib_Session_ID
#
# globally unique ID for the federation account, used to map the federation account to an EASY account. This should
# normally be the standard REMOTE_USER CGI var.
easy.federationLogin.propertyMapping.remoteUser=Shib_eduPersonPN
easy.federationLogin.propertyMapping.email=Shib_email
easy.federationLogin.propertyMapping.firstName=Shib_givenName
easy.federationLogin.propertyMapping.surname=Shib_surName
easy.federationLogin.propertyMapping.organization=Shib_HomeOrg

# Fedora Resource Index
fedora.ri.url=http://${easy.host}:8080/fedora/risearch

# Fedora server
easy.store.name=easy_local
fedora.base.url=http://${easy.host}:8080/fedora
fedora.admin.username={{ easy_sword_fedora_username }}
fedora.admin.userpass={{ easy_sword_fedora_password }}

# Easy database
fedora.db.username={{ easy_sword_easy_fs_rdb_username }}
fedora.db.password={{ easy_sword_easy_fs_rdb_password }}
fedora.db.connectionUrl=jdbc:postgresql://${easy.host}:5432/easy_db
fedora.db.hbnDriverClass=org.postgresql.Driver
fedora.db.hbnDialect=org.hibernate.dialect.PostgreSQLDialect

# Persistent Identifier Generator
# developers should use localhost and
# run mvn goal "jetty:run" on project pid-generator with JVM arguments: -Djetty.port=8082
pid.service.base.url=http://${easy.host}:8082

# DOI registration
datacite.registration.doi.uri={{ easy_sword_datacite_doi_registration_uri }}
datacite.registration.metadata.uri={{ easy_sword_datacite_metadata_registration_uri }}
datacite.username={{ easy_sword_datacite_username }}
datacite.password={{ easy_sword_datacite_password }}

dataset.resolver.uri={{ easy_sword_dataset_resolver_uri }}

# SORL search index
solr.url=http://${easy.host}:8080/solr

# Audit
business.audit.enabled=false
business.audit.file=

# Host running the SMTP service
mail.smtp.host=${easy.host}
#
# The e-mail address to show as sender in automatic E-mails
mail.fromAddress={{ easy_sword_mail_from_address }}
#
# Comma-separated list of e-mail addresses to send a copy of all notification 
# mails to users.  This can be used to debug problems with automatic mails.
# Leave blank if no BCC-mails are required
mail.bccs={{ easy_sword_bccs_list }}

# When to send admin mails
admin.mailer.sendOnStarting={{ easy_sword_send_mail_on_starting }}
admin.mailer.sendOnClosing={{ easy_sword_send_mail_on_closing }}
#
# Comma-separated list of e-mail addresses to send admin mails to 
admin.mailer.addresses={{ easy_sword_admin_mailer_recipients }}


# Limits in MB and number of files to download (not used by sword)
data.downloadLimit=1000
file.downloadLimit=100

# Location of the resources needed by the license creator
license.resources={{ easy_sword_license_resources }}

# Location of the content that is editable through the Web UI. It is HIGHLY RECOMMENDED
# that you copy the example initial content in ${EASY_WEBUI_HOME}/res/example/editable to 
# a location outside the installation directory and modify below property to point to that
# direction.  Notice also that this new location mus be writeable by the Linux user running
# Tomcat.  
easy.editable.content.root={{ easy_sword_editable_content_root }}

# Location of the file that stores the read-only status of EASY. This should point
# to a writable location, but it is not necessary for the file to exist; EASY will
# create it.
easy.business.system.status.file={{ easy_sword_system_status_file }}

#
# SWORD specific (Needs cleaning up)
#

# should be identical to web-xml value
sword.servlet.name=sword

# for service document and deposit response
sword.providerURL={{ easy_sword_provider_url }}
easy.sword.server.easy.home={{ easy_sword_easy_home }}

# deposit response
easy.sword.server.dataset.path={{ easy_sword_dataset_resolver_uri }}

# for service document (No HTML for the titles. On production: move the first phrase of the treatment to the policy?)
easy.sword.server.workspace.title=DANS sword interface
easy.sword.server.collection.title=EASY
easy.sword.server.acceptPackaging={{ easy_sword_accept_packaging }}
easy.sword.server.collection.abstract=Electronic Archive System, accepts deposits by users registered on <a href="{0}">EASY</a>
easy.sword.server.collection.policy={{ easy_sword_policy_line }} 
easy.sword.server.collection.treatment=DANS will store deposited data according to the guidelines of the international <a href="http://www.datasealofapproval.org/">Data Seal of Approval</a>. After several workdays the data will be available to other researchers, in accordance with the conditions indicated by you and DANS. At the DANS website you'll find more information on <a href="{{ easy_sword_about_depositing_data }}">depositing data</a>.

# for deposit response (Do not change for production. Treatment place holders: EasyUser.get*, Dataset.get*)
easy.sword.server.deposit.treatment=A confirmation of the deposit has been sent to ~EasyUser.getEmail~ . DANS will store deposited data according to the guidelines of the international <a href="http://www.datasealofapproval.org/">Data Seal of Approval</a>. After several workdays the data will be available to other researchers, in accordance with the conditions indicated by you and DANS. At the DANS website you'll find more information on <a href="{{ easy_sword_about_depositing_data }}">depositing data</a>.

easy.sword.server.unzip.dir={{ easy_sword_unzip_dir }}

easy.web.server.port.http=80
easy.web.server.port.https=443

sword.audit.file={{ easy_sword_audit_file }}
